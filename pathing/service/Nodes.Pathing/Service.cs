// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nodes.Pathing {

  /// <summary>Holder for reflection information generated from service.proto</summary>
  public static partial class ServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1zZXJ2aWNlLnByb3RvIhsKC0hhbmdSZXF1ZXN0EgwKBFRlc3QYASABKAki",
            "MwoJUGF0aFBvaW50EhcKCFBvc2l0aW9uGAEgASgLMgUuVmVjMxINCgVGbGFn",
            "cxgCIAEoDSInCgRWZWMzEgkKAVgYASABKAESCQoBWRgCIAEoARIJCgFaGAMg",
            "ASgBIhAKDlJlc3RhcnRSZXF1ZXN0IhEKD1Jlc3RhcnRSZXNwb25zZSIcChpM",
            "aXN0TG9hZGVkTmF2bWVzaGVzUmVxdWVzdCIwChtMaXN0TG9hZGVkTmF2bWVz",
            "aGVzUmVzcG9uc2USEQoJTmF2bWVzaGVzGAEgAygNInQKDlBhdGhpbmdSZXF1",
            "ZXN0Eg8KB05hdm1lc2gYASABKA0SHAoNU3RhcnRpbmdQb2ludBgCIAEoCzIF",
            "LlZlYzMSHwoQRGVzdGluYXRpb25Qb2ludBgDIAEoCzIFLlZlYzMSEgoKU2Vx",
            "dWVuY2VJRBgEIAEoDSKPAQoPUGF0aGluZ1Jlc3BvbnNlEiIKClJlc3VsdENv",
            "ZGUYASABKA4yDi5QYXRoaW5nUmVzdWx0EhgKBFBhdGgYAiADKAsyCi5QYXRo",
            "UG9pbnQSEgoKU2VxdWVuY2VJRBgDIAEoDRIRCglQYXRoTm9kZXMYBCABKA0S",
            "FwoPU2VyaWFsaXplZE5vZGVzGAUgASgMIlEKFUdldFJhbmRvbVBvaW50UmVx",
            "dWVzdBIPCgdOYXZtZXNoGAEgASgNEhcKCFBvc2l0aW9uGAIgASgLMgUuVmVj",
            "MxIOCgZSYWRpdXMYAyABKAIiLgoWR2V0UmFuZG9tUG9pbnRSZXNwb25zZRIU",
            "CgVQb2ludBgBIAEoCzIFLlZlYzMiWAoWR2V0Q2xvc2VzdFBvaW50UmVxdWVz",
            "dBIPCgdOYXZtZXNoGAEgASgNEhcKCFBvc2l0aW9uGAIgASgLMgUuVmVjMxIU",
            "CgVSYW5nZRgDIAEoCzIFLlZlYzMiLwoXR2V0Q2xvc2VzdFBvaW50UmVzcG9u",
            "c2USFAoFUG9pbnQYASABKAsyBS5WZWMzKmoKDVBhdGhpbmdSZXN1bHQSCwoH",
            "VU5LTk9XThAAEg0KCVBhdGhGb3VuZBABEhQKEFBhcnRpYWxQYXRoRm91bmQQ",
            "AhIPCgtOb1BhdGhGb3VuZBADEhYKEk5hdm1lc2hVbmF2YWlsYWJsZRAEMrED",
            "Cg5QYXRoaW5nU2VydmljZRIsCgdSZXN0YXJ0Eg8uUmVzdGFydFJlcXVlc3Qa",
            "EC5SZXN0YXJ0UmVzcG9uc2USUAoTTGlzdExvYWRlZE5hdm1lc2hlcxIbLkxp",
            "c3RMb2FkZWROYXZtZXNoZXNSZXF1ZXN0GhwuTGlzdExvYWRlZE5hdm1lc2hl",
            "c1Jlc3BvbnNlEjQKD0dldFBhdGhTdHJhaWdodBIPLlBhdGhpbmdSZXF1ZXN0",
            "GhAuUGF0aGluZ1Jlc3BvbnNlEjgKD0dldFBhdGhTdHJlYW1lZBIPLlBhdGhp",
            "bmdSZXF1ZXN0GhAuUGF0aGluZ1Jlc3BvbnNlKAEwARJBCg5HZXRSYW5kb21Q",
            "b2ludBIWLkdldFJhbmRvbVBvaW50UmVxdWVzdBoXLkdldFJhbmRvbVBvaW50",
            "UmVzcG9uc2USRAoPR2V0Q2xvc2VzdFBvaW50EhcuR2V0Q2xvc2VzdFBvaW50",
            "UmVxdWVzdBoYLkdldENsb3Nlc3RQb2ludFJlc3BvbnNlEiYKCEhhbmdUZXN0",
            "EgwuSGFuZ1JlcXVlc3QaDC5IYW5nUmVxdWVzdEIQqgINTm9kZXMuUGF0aGlu",
            "Z2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Nodes.Pathing.PathingResult), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.HangRequest), global::Nodes.Pathing.HangRequest.Parser, new[]{ "Test" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.PathPoint), global::Nodes.Pathing.PathPoint.Parser, new[]{ "Position", "Flags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.Vec3), global::Nodes.Pathing.Vec3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.RestartRequest), global::Nodes.Pathing.RestartRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.RestartResponse), global::Nodes.Pathing.RestartResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.ListLoadedNavmeshesRequest), global::Nodes.Pathing.ListLoadedNavmeshesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.ListLoadedNavmeshesResponse), global::Nodes.Pathing.ListLoadedNavmeshesResponse.Parser, new[]{ "Navmeshes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.PathingRequest), global::Nodes.Pathing.PathingRequest.Parser, new[]{ "Navmesh", "StartingPoint", "DestinationPoint", "SequenceID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.PathingResponse), global::Nodes.Pathing.PathingResponse.Parser, new[]{ "ResultCode", "Path", "SequenceID", "PathNodes", "SerializedNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.GetRandomPointRequest), global::Nodes.Pathing.GetRandomPointRequest.Parser, new[]{ "Navmesh", "Position", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.GetRandomPointResponse), global::Nodes.Pathing.GetRandomPointResponse.Parser, new[]{ "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.GetClosestPointRequest), global::Nodes.Pathing.GetClosestPointRequest.Parser, new[]{ "Navmesh", "Position", "Range" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nodes.Pathing.GetClosestPointResponse), global::Nodes.Pathing.GetClosestPointResponse.Parser, new[]{ "Point" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PathingResult {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("PathFound")] PathFound = 1,
    [pbr::OriginalName("PartialPathFound")] PartialPathFound = 2,
    [pbr::OriginalName("NoPathFound")] NoPathFound = 3,
    [pbr::OriginalName("NavmeshUnavailable")] NavmeshUnavailable = 4,
  }

  #endregion

  #region Messages
  public sealed partial class HangRequest : pb::IMessage<HangRequest> {
    private static readonly pb::MessageParser<HangRequest> _parser = new pb::MessageParser<HangRequest>(() => new HangRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangRequest(HangRequest other) : this() {
      test_ = other.test_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangRequest Clone() {
      return new HangRequest(this);
    }

    /// <summary>Field number for the "Test" field.</summary>
    public const int TestFieldNumber = 1;
    private string test_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Test {
      get { return test_; }
      set {
        test_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HangRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HangRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Test != other.Test) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Test.Length != 0) hash ^= Test.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Test.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Test);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Test.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Test);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HangRequest other) {
      if (other == null) {
        return;
      }
      if (other.Test.Length != 0) {
        Test = other.Test;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Test = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PathPoint : pb::IMessage<PathPoint> {
    private static readonly pb::MessageParser<PathPoint> _parser = new pb::MessageParser<PathPoint>(() => new PathPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPoint(PathPoint other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      flags_ = other.flags_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPoint Clone() {
      return new PathPoint(this);
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Nodes.Pathing.Vec3 position_;
    /// <summary>
    ///  Position
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nodes.Pathing.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 2;
    private uint flags_;
    /// <summary>
    ///  dtPolyFlags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (Flags != other.Flags) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (Flags != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Flags);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathPoint other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Nodes.Pathing.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Nodes.Pathing.Vec3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 16: {
            Flags = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vec3 : pb::IMessage<Vec3> {
    private static readonly pb::MessageParser<Vec3> _parser = new pb::MessageParser<Vec3>(() => new Vec3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3(Vec3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3 Clone() {
      return new Vec3(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Z != 0D) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RestartRequest : pb::IMessage<RestartRequest> {
    private static readonly pb::MessageParser<RestartRequest> _parser = new pb::MessageParser<RestartRequest>(() => new RestartRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartRequest(RestartRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartRequest Clone() {
      return new RestartRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestartRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestartRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RestartResponse : pb::IMessage<RestartResponse> {
    private static readonly pb::MessageParser<RestartResponse> _parser = new pb::MessageParser<RestartResponse>(() => new RestartResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartResponse(RestartResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartResponse Clone() {
      return new RestartResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestartResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestartResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ListLoadedNavmeshesRequest : pb::IMessage<ListLoadedNavmeshesRequest> {
    private static readonly pb::MessageParser<ListLoadedNavmeshesRequest> _parser = new pb::MessageParser<ListLoadedNavmeshesRequest>(() => new ListLoadedNavmeshesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLoadedNavmeshesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLoadedNavmeshesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLoadedNavmeshesRequest(ListLoadedNavmeshesRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLoadedNavmeshesRequest Clone() {
      return new ListLoadedNavmeshesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLoadedNavmeshesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLoadedNavmeshesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLoadedNavmeshesRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ListLoadedNavmeshesResponse : pb::IMessage<ListLoadedNavmeshesResponse> {
    private static readonly pb::MessageParser<ListLoadedNavmeshesResponse> _parser = new pb::MessageParser<ListLoadedNavmeshesResponse>(() => new ListLoadedNavmeshesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLoadedNavmeshesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLoadedNavmeshesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLoadedNavmeshesResponse(ListLoadedNavmeshesResponse other) : this() {
      navmeshes_ = other.navmeshes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLoadedNavmeshesResponse Clone() {
      return new ListLoadedNavmeshesResponse(this);
    }

    /// <summary>Field number for the "Navmeshes" field.</summary>
    public const int NavmeshesFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_navmeshes_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> navmeshes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  List of all navmeshes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Navmeshes {
      get { return navmeshes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLoadedNavmeshesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLoadedNavmeshesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!navmeshes_.Equals(other.navmeshes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= navmeshes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      navmeshes_.WriteTo(output, _repeated_navmeshes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += navmeshes_.CalculateSize(_repeated_navmeshes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLoadedNavmeshesResponse other) {
      if (other == null) {
        return;
      }
      navmeshes_.Add(other.navmeshes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            navmeshes_.AddEntriesFrom(input, _repeated_navmeshes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PathingRequest : pb::IMessage<PathingRequest> {
    private static readonly pb::MessageParser<PathingRequest> _parser = new pb::MessageParser<PathingRequest>(() => new PathingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathingRequest(PathingRequest other) : this() {
      navmesh_ = other.navmesh_;
      StartingPoint = other.startingPoint_ != null ? other.StartingPoint.Clone() : null;
      DestinationPoint = other.destinationPoint_ != null ? other.DestinationPoint.Clone() : null;
      sequenceID_ = other.sequenceID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathingRequest Clone() {
      return new PathingRequest(this);
    }

    /// <summary>Field number for the "Navmesh" field.</summary>
    public const int NavmeshFieldNumber = 1;
    private uint navmesh_;
    /// <summary>
    ///  Navmesh ID (Zone ClientID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Navmesh {
      get { return navmesh_; }
      set {
        navmesh_ = value;
      }
    }

    /// <summary>Field number for the "StartingPoint" field.</summary>
    public const int StartingPointFieldNumber = 2;
    private global::Nodes.Pathing.Vec3 startingPoint_;
    /// <summary>
    ///  Starting point of the path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nodes.Pathing.Vec3 StartingPoint {
      get { return startingPoint_; }
      set {
        startingPoint_ = value;
      }
    }

    /// <summary>Field number for the "DestinationPoint" field.</summary>
    public const int DestinationPointFieldNumber = 3;
    private global::Nodes.Pathing.Vec3 destinationPoint_;
    /// <summary>
    ///  Destination of the path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nodes.Pathing.Vec3 DestinationPoint {
      get { return destinationPoint_; }
      set {
        destinationPoint_ = value;
      }
    }

    /// <summary>Field number for the "SequenceID" field.</summary>
    public const int SequenceIDFieldNumber = 4;
    private uint sequenceID_;
    /// <summary>
    ///  Sequence ID (if any, found in response)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SequenceID {
      get { return sequenceID_; }
      set {
        sequenceID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Navmesh != other.Navmesh) return false;
      if (!object.Equals(StartingPoint, other.StartingPoint)) return false;
      if (!object.Equals(DestinationPoint, other.DestinationPoint)) return false;
      if (SequenceID != other.SequenceID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Navmesh != 0) hash ^= Navmesh.GetHashCode();
      if (startingPoint_ != null) hash ^= StartingPoint.GetHashCode();
      if (destinationPoint_ != null) hash ^= DestinationPoint.GetHashCode();
      if (SequenceID != 0) hash ^= SequenceID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Navmesh != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Navmesh);
      }
      if (startingPoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartingPoint);
      }
      if (destinationPoint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DestinationPoint);
      }
      if (SequenceID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SequenceID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Navmesh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Navmesh);
      }
      if (startingPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartingPoint);
      }
      if (destinationPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestinationPoint);
      }
      if (SequenceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Navmesh != 0) {
        Navmesh = other.Navmesh;
      }
      if (other.startingPoint_ != null) {
        if (startingPoint_ == null) {
          startingPoint_ = new global::Nodes.Pathing.Vec3();
        }
        StartingPoint.MergeFrom(other.StartingPoint);
      }
      if (other.destinationPoint_ != null) {
        if (destinationPoint_ == null) {
          destinationPoint_ = new global::Nodes.Pathing.Vec3();
        }
        DestinationPoint.MergeFrom(other.DestinationPoint);
      }
      if (other.SequenceID != 0) {
        SequenceID = other.SequenceID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Navmesh = input.ReadUInt32();
            break;
          }
          case 18: {
            if (startingPoint_ == null) {
              startingPoint_ = new global::Nodes.Pathing.Vec3();
            }
            input.ReadMessage(startingPoint_);
            break;
          }
          case 26: {
            if (destinationPoint_ == null) {
              destinationPoint_ = new global::Nodes.Pathing.Vec3();
            }
            input.ReadMessage(destinationPoint_);
            break;
          }
          case 32: {
            SequenceID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PathingResponse : pb::IMessage<PathingResponse> {
    private static readonly pb::MessageParser<PathingResponse> _parser = new pb::MessageParser<PathingResponse>(() => new PathingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathingResponse(PathingResponse other) : this() {
      resultCode_ = other.resultCode_;
      path_ = other.path_.Clone();
      sequenceID_ = other.sequenceID_;
      pathNodes_ = other.pathNodes_;
      serializedNodes_ = other.serializedNodes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathingResponse Clone() {
      return new PathingResponse(this);
    }

    /// <summary>Field number for the "ResultCode" field.</summary>
    public const int ResultCodeFieldNumber = 1;
    private global::Nodes.Pathing.PathingResult resultCode_ = 0;
    /// <summary>
    ///  Error (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nodes.Pathing.PathingResult ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nodes.Pathing.PathPoint> _repeated_path_codec
        = pb::FieldCodec.ForMessage(18, global::Nodes.Pathing.PathPoint.Parser);
    private readonly pbc::RepeatedField<global::Nodes.Pathing.PathPoint> path_ = new pbc::RepeatedField<global::Nodes.Pathing.PathPoint>();
    /// <summary>
    ///  Path nodes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nodes.Pathing.PathPoint> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "SequenceID" field.</summary>
    public const int SequenceIDFieldNumber = 3;
    private uint sequenceID_;
    /// <summary>
    ///  Sequence ID (if any, found in response)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SequenceID {
      get { return sequenceID_; }
      set {
        sequenceID_ = value;
      }
    }

    /// <summary>Field number for the "PathNodes" field.</summary>
    public const int PathNodesFieldNumber = 4;
    private uint pathNodes_;
    /// <summary>
    ///  Path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PathNodes {
      get { return pathNodes_; }
      set {
        pathNodes_ = value;
      }
    }

    /// <summary>Field number for the "SerializedNodes" field.</summary>
    public const int SerializedNodesFieldNumber = 5;
    private pb::ByteString serializedNodes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SerializedNodes {
      get { return serializedNodes_; }
      set {
        serializedNodes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultCode != other.ResultCode) return false;
      if(!path_.Equals(other.path_)) return false;
      if (SequenceID != other.SequenceID) return false;
      if (PathNodes != other.PathNodes) return false;
      if (SerializedNodes != other.SerializedNodes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      hash ^= path_.GetHashCode();
      if (SequenceID != 0) hash ^= SequenceID.GetHashCode();
      if (PathNodes != 0) hash ^= PathNodes.GetHashCode();
      if (SerializedNodes.Length != 0) hash ^= SerializedNodes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ResultCode);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (SequenceID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SequenceID);
      }
      if (PathNodes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PathNodes);
      }
      if (SerializedNodes.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(SerializedNodes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (SequenceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceID);
      }
      if (PathNodes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PathNodes);
      }
      if (SerializedNodes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SerializedNodes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathingResponse other) {
      if (other == null) {
        return;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      path_.Add(other.path_);
      if (other.SequenceID != 0) {
        SequenceID = other.SequenceID;
      }
      if (other.PathNodes != 0) {
        PathNodes = other.PathNodes;
      }
      if (other.SerializedNodes.Length != 0) {
        SerializedNodes = other.SerializedNodes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            resultCode_ = (global::Nodes.Pathing.PathingResult) input.ReadEnum();
            break;
          }
          case 18: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 24: {
            SequenceID = input.ReadUInt32();
            break;
          }
          case 32: {
            PathNodes = input.ReadUInt32();
            break;
          }
          case 42: {
            SerializedNodes = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRandomPointRequest : pb::IMessage<GetRandomPointRequest> {
    private static readonly pb::MessageParser<GetRandomPointRequest> _parser = new pb::MessageParser<GetRandomPointRequest>(() => new GetRandomPointRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRandomPointRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomPointRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomPointRequest(GetRandomPointRequest other) : this() {
      navmesh_ = other.navmesh_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      radius_ = other.radius_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomPointRequest Clone() {
      return new GetRandomPointRequest(this);
    }

    /// <summary>Field number for the "Navmesh" field.</summary>
    public const int NavmeshFieldNumber = 1;
    private uint navmesh_;
    /// <summary>
    ///  Navmesh ID (Zone ClientID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Navmesh {
      get { return navmesh_; }
      set {
        navmesh_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Nodes.Pathing.Vec3 position_;
    /// <summary>
    ///  Position (center)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nodes.Pathing.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 3;
    private float radius_;
    /// <summary>
    ///  Radius around center
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRandomPointRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRandomPointRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Navmesh != other.Navmesh) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Radius != other.Radius) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Navmesh != 0) hash ^= Navmesh.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Navmesh != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Navmesh);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (Radius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Radius);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Navmesh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Navmesh);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRandomPointRequest other) {
      if (other == null) {
        return;
      }
      if (other.Navmesh != 0) {
        Navmesh = other.Navmesh;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Nodes.Pathing.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Navmesh = input.ReadUInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Nodes.Pathing.Vec3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 29: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRandomPointResponse : pb::IMessage<GetRandomPointResponse> {
    private static readonly pb::MessageParser<GetRandomPointResponse> _parser = new pb::MessageParser<GetRandomPointResponse>(() => new GetRandomPointResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRandomPointResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomPointResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomPointResponse(GetRandomPointResponse other) : this() {
      Point = other.point_ != null ? other.Point.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRandomPointResponse Clone() {
      return new GetRandomPointResponse(this);
    }

    /// <summary>Field number for the "Point" field.</summary>
    public const int PointFieldNumber = 1;
    private global::Nodes.Pathing.Vec3 point_;
    /// <summary>
    ///  Random Point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nodes.Pathing.Vec3 Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRandomPointResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRandomPointResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Point, other.Point)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (point_ != null) hash ^= Point.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (point_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Point);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRandomPointResponse other) {
      if (other == null) {
        return;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::Nodes.Pathing.Vec3();
        }
        Point.MergeFrom(other.Point);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (point_ == null) {
              point_ = new global::Nodes.Pathing.Vec3();
            }
            input.ReadMessage(point_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetClosestPointRequest : pb::IMessage<GetClosestPointRequest> {
    private static readonly pb::MessageParser<GetClosestPointRequest> _parser = new pb::MessageParser<GetClosestPointRequest>(() => new GetClosestPointRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClosestPointRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestPointRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestPointRequest(GetClosestPointRequest other) : this() {
      navmesh_ = other.navmesh_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Range = other.range_ != null ? other.Range.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestPointRequest Clone() {
      return new GetClosestPointRequest(this);
    }

    /// <summary>Field number for the "Navmesh" field.</summary>
    public const int NavmeshFieldNumber = 1;
    private uint navmesh_;
    /// <summary>
    ///  Navmesh ID (Zone ClientID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Navmesh {
      get { return navmesh_; }
      set {
        navmesh_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Nodes.Pathing.Vec3 position_;
    /// <summary>
    ///  Position (center)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nodes.Pathing.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Range" field.</summary>
    public const int RangeFieldNumber = 3;
    private global::Nodes.Pathing.Vec3 range_;
    /// <summary>
    ///  +- Range along each axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nodes.Pathing.Vec3 Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClosestPointRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClosestPointRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Navmesh != other.Navmesh) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Range, other.Range)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Navmesh != 0) hash ^= Navmesh.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (range_ != null) hash ^= Range.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Navmesh != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Navmesh);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (range_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Range);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Navmesh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Navmesh);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (range_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClosestPointRequest other) {
      if (other == null) {
        return;
      }
      if (other.Navmesh != 0) {
        Navmesh = other.Navmesh;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Nodes.Pathing.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.range_ != null) {
        if (range_ == null) {
          range_ = new global::Nodes.Pathing.Vec3();
        }
        Range.MergeFrom(other.Range);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Navmesh = input.ReadUInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Nodes.Pathing.Vec3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (range_ == null) {
              range_ = new global::Nodes.Pathing.Vec3();
            }
            input.ReadMessage(range_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetClosestPointResponse : pb::IMessage<GetClosestPointResponse> {
    private static readonly pb::MessageParser<GetClosestPointResponse> _parser = new pb::MessageParser<GetClosestPointResponse>(() => new GetClosestPointResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClosestPointResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nodes.Pathing.ServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestPointResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestPointResponse(GetClosestPointResponse other) : this() {
      Point = other.point_ != null ? other.Point.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClosestPointResponse Clone() {
      return new GetClosestPointResponse(this);
    }

    /// <summary>Field number for the "Point" field.</summary>
    public const int PointFieldNumber = 1;
    private global::Nodes.Pathing.Vec3 point_;
    /// <summary>
    ///  Closest Point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nodes.Pathing.Vec3 Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClosestPointResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClosestPointResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Point, other.Point)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (point_ != null) hash ^= Point.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (point_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Point);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClosestPointResponse other) {
      if (other == null) {
        return;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::Nodes.Pathing.Vec3();
        }
        Point.MergeFrom(other.Point);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (point_ == null) {
              point_ = new global::Nodes.Pathing.Vec3();
            }
            input.ReadMessage(point_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
