// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regionservice.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace RegionServer {
  public static partial class RegionService
  {
    static readonly string __ServiceName = "RegionService";

    static readonly Marshaller<global::RegionServer.ServerInfoRequest> __Marshaller_ServerInfoRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RegionServer.ServerInfoRequest.Parser.ParseFrom);
    static readonly Marshaller<global::RegionServer.ServerInfoResponse> __Marshaller_ServerInfoResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RegionServer.ServerInfoResponse.Parser.ParseFrom);
    static readonly Marshaller<global::RegionServer.ClearAllClientsRequest> __Marshaller_ClearAllClientsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RegionServer.ClearAllClientsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::RegionServer.ClearAllClientsResponse> __Marshaller_ClearAllClientsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RegionServer.ClearAllClientsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::RegionServer.AddClientRequest> __Marshaller_AddClientRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RegionServer.AddClientRequest.Parser.ParseFrom);
    static readonly Marshaller<global::RegionServer.AddClientResponse> __Marshaller_AddClientResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RegionServer.AddClientResponse.Parser.ParseFrom);
    static readonly Marshaller<global::RegionServer.RemoveClientRequest> __Marshaller_RemoveClientRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RegionServer.RemoveClientRequest.Parser.ParseFrom);
    static readonly Marshaller<global::RegionServer.RemoveClientResponse> __Marshaller_RemoveClientResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RegionServer.RemoveClientResponse.Parser.ParseFrom);
    static readonly Marshaller<global::RegionServer.ListClientsRequest> __Marshaller_ListClientsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RegionServer.ListClientsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::RegionServer.ClientInfo> __Marshaller_ClientInfo = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RegionServer.ClientInfo.Parser.ParseFrom);

    static readonly Method<global::RegionServer.ServerInfoRequest, global::RegionServer.ServerInfoResponse> __Method_ServerInfo = new Method<global::RegionServer.ServerInfoRequest, global::RegionServer.ServerInfoResponse>(
        MethodType.Unary,
        __ServiceName,
        "ServerInfo",
        __Marshaller_ServerInfoRequest,
        __Marshaller_ServerInfoResponse);

    static readonly Method<global::RegionServer.ClearAllClientsRequest, global::RegionServer.ClearAllClientsResponse> __Method_ClearAllClients = new Method<global::RegionServer.ClearAllClientsRequest, global::RegionServer.ClearAllClientsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ClearAllClients",
        __Marshaller_ClearAllClientsRequest,
        __Marshaller_ClearAllClientsResponse);

    static readonly Method<global::RegionServer.AddClientRequest, global::RegionServer.AddClientResponse> __Method_AddClient = new Method<global::RegionServer.AddClientRequest, global::RegionServer.AddClientResponse>(
        MethodType.Unary,
        __ServiceName,
        "AddClient",
        __Marshaller_AddClientRequest,
        __Marshaller_AddClientResponse);

    static readonly Method<global::RegionServer.RemoveClientRequest, global::RegionServer.RemoveClientResponse> __Method_RemoveClient = new Method<global::RegionServer.RemoveClientRequest, global::RegionServer.RemoveClientResponse>(
        MethodType.Unary,
        __ServiceName,
        "RemoveClient",
        __Marshaller_RemoveClientRequest,
        __Marshaller_RemoveClientResponse);

    static readonly Method<global::RegionServer.ListClientsRequest, global::RegionServer.ClientInfo> __Method_ListClients = new Method<global::RegionServer.ListClientsRequest, global::RegionServer.ClientInfo>(
        MethodType.ServerStreaming,
        __ServiceName,
        "ListClients",
        __Marshaller_ListClientsRequest,
        __Marshaller_ClientInfo);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::RegionServer.RegionserviceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RegionService</summary>
    public abstract partial class RegionServiceBase
    {
      /// <summary>
      /// Generic info about this server
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RegionServer.ServerInfoResponse> ServerInfo(global::RegionServer.ServerInfoRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes all clients (called after server reboot)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RegionServer.ClearAllClientsResponse> ClearAllClients(global::RegionServer.ClearAllClientsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds a client to this region
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RegionServer.AddClientResponse> AddClient(global::RegionServer.AddClientRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes a client from this region
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RegionServer.RemoveClientResponse> RemoveClient(global::RegionServer.RemoveClientRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all clients of the regionserver
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ListClients(global::RegionServer.ListClientsRequest request, IServerStreamWriter<global::RegionServer.ClientInfo> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegionService</summary>
    public partial class RegionServiceClient : ClientBase<RegionServiceClient>
    {
      /// <summary>Creates a new client for RegionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegionServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegionServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Generic info about this server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RegionServer.ServerInfoResponse ServerInfo(global::RegionServer.ServerInfoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ServerInfo(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generic info about this server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RegionServer.ServerInfoResponse ServerInfo(global::RegionServer.ServerInfoRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerInfo, null, options, request);
      }
      /// <summary>
      /// Generic info about this server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::RegionServer.ServerInfoResponse> ServerInfoAsync(global::RegionServer.ServerInfoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ServerInfoAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generic info about this server
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::RegionServer.ServerInfoResponse> ServerInfoAsync(global::RegionServer.ServerInfoRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerInfo, null, options, request);
      }
      /// <summary>
      /// Deletes all clients (called after server reboot)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RegionServer.ClearAllClientsResponse ClearAllClients(global::RegionServer.ClearAllClientsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClearAllClients(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes all clients (called after server reboot)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RegionServer.ClearAllClientsResponse ClearAllClients(global::RegionServer.ClearAllClientsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearAllClients, null, options, request);
      }
      /// <summary>
      /// Deletes all clients (called after server reboot)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::RegionServer.ClearAllClientsResponse> ClearAllClientsAsync(global::RegionServer.ClearAllClientsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClearAllClientsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes all clients (called after server reboot)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::RegionServer.ClearAllClientsResponse> ClearAllClientsAsync(global::RegionServer.ClearAllClientsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearAllClients, null, options, request);
      }
      /// <summary>
      /// Adds a client to this region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RegionServer.AddClientResponse AddClient(global::RegionServer.AddClientRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddClient(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a client to this region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RegionServer.AddClientResponse AddClient(global::RegionServer.AddClientRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddClient, null, options, request);
      }
      /// <summary>
      /// Adds a client to this region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::RegionServer.AddClientResponse> AddClientAsync(global::RegionServer.AddClientRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddClientAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a client to this region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::RegionServer.AddClientResponse> AddClientAsync(global::RegionServer.AddClientRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddClient, null, options, request);
      }
      /// <summary>
      /// Removes a client from this region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RegionServer.RemoveClientResponse RemoveClient(global::RegionServer.RemoveClientRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveClient(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a client from this region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RegionServer.RemoveClientResponse RemoveClient(global::RegionServer.RemoveClientRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveClient, null, options, request);
      }
      /// <summary>
      /// Removes a client from this region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::RegionServer.RemoveClientResponse> RemoveClientAsync(global::RegionServer.RemoveClientRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveClientAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a client from this region
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::RegionServer.RemoveClientResponse> RemoveClientAsync(global::RegionServer.RemoveClientRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveClient, null, options, request);
      }
      /// <summary>
      /// Lists all clients of the regionserver
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncServerStreamingCall<global::RegionServer.ClientInfo> ListClients(global::RegionServer.ListClientsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListClients(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all clients of the regionserver
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncServerStreamingCall<global::RegionServer.ClientInfo> ListClients(global::RegionServer.ListClientsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListClients, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(RegionServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ServerInfo, serviceImpl.ServerInfo)
          .AddMethod(__Method_ClearAllClients, serviceImpl.ClearAllClients)
          .AddMethod(__Method_AddClient, serviceImpl.AddClient)
          .AddMethod(__Method_RemoveClient, serviceImpl.RemoveClient)
          .AddMethod(__Method_ListClients, serviceImpl.ListClients).Build();
    }

  }
}
#endregion
