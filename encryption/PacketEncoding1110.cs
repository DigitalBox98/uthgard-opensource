using System;
using System.Reflection;
using DOL.GS.PacketHandler.Cryptography.RC4;
using log4net;

namespace DOL.GS.PacketHandler.Cryptography {
  /// <summary>
  ///   Packet Encoding for 1.110+
  ///   @author taferth, mlinder
  /// </summary>
  public class PacketEncoding1110 : IPacketEncoding {
    /// <summary>
    ///   Defines a logger for this class.
    /// </summary>
    private static readonly ILog _log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

    private byte[] _commonKey;
    private byte[] _sbox;

    /// <summary>
    ///   Crypt mode
    /// </summary>
    public enum eCryptMode {
      /// <summary>
      ///   Specifies that no encryption is used
      /// </summary>
      None = 0,

      /// <summary>
      ///   Specifies that RSA is used. This is usually only used for sharing the common RC4 key.
      /// </summary>
      RSA = 2,

      /// <summary>
      ///   Specifies that RC4 encryption is used. This will be the case for all data packets.
      /// </summary>
      RC4
    }

    /// <summary>
    ///   Gets/Sets the current Crypt Mode.
    /// </summary>
    public eCryptMode CryptMode { get; set; }

    /// <summary>
    ///   Changes the Key shared between client and server. This is usually a 64-byte key generated by the client.
    /// </summary>
    public byte[] CommonKey {
      get { return _commonKey; }
      set {
        _commonKey = value;
        _sbox = GenerateSBox(value);
      }
    }

    public PacketEncoding1110() {
      CryptMode = eCryptMode.None;
    }

    /// <summary>
    ///   Generates the SBox from the common key
    /// </summary>
    private static byte[] GenerateSBox(byte[] commonKey) {
      commonKey.ThrowIfNull();

      // Generate the S-Box from the common key (Code borrowed from DAoC Logger)
      var sbox = new byte[256];
      int x, y;
      for (x = 0; x < sbox.Length; x++) {
        sbox[x] = (byte) x;
      }

      for (x = y = 0; x < 256; x++) {
        y = (y + sbox[x] + commonKey[x % commonKey.Length]) & 255;
        var tmp = sbox[x];
        sbox[x] = sbox[y];
        sbox[y] = tmp;
      }

      // Dump the S-Box
      //if (_log.IsDebugEnabled) {
      //    _log.Debug(Marshal.ToHexDump("Common-Key", commonKey));
      //    _log.Debug(Marshal.ToHexDump("S-Box", sbox));
      //}

      return sbox;
    }

//#if TEST
//        [Test]
//        public void TestUpdateSBox() {
//            byte[] key = {
//                             0x69, 0xB1, 0xB6, 0x2B, 0x07, 0x50, 0x88, 0x4D, 0xC3, 0x81, 0xAF, 0x48, 0x11, 0x90, 0x0B,
//                             0x1F
//                             , 0x26, 0xFA, 0x16, 0xC4, 0x0F, 0x9E, 0xD2, 0x86, 0xED, 0x6B, 0xB1, 0x51, 0x51, 0x54, 0x89,
//                             0xED, 0x9A, 0x8E, 0x79, 0x78, 0x15, 0x0D, 0x58, 0xFA, 0x15, 0xF6, 0xC9, 0xF5, 0x5F, 0x95,
//                             0x61
//                             , 0xA9, 0x8D, 0xF3, 0xCF, 0xFD, 0x75, 0x6C, 0x2B, 0x81, 0x1C, 0x8E, 0xB9, 0xBC, 0x9B, 0x87,
//                             0x3D, 0x0A
//                         };
//            byte[] sbox = {
//                              0x4B, 0x8C, 0x96, 0x62, 0x0C, 0x29, 0xEF, 0x43, 0x0E, 0x7D, 0x7A, 0x46, 0xB9, 0x56, 0x00,
//                              0x5F, 0x68, 0x2F, 0x47, 0x31, 0xA1, 0x81, 0x4D, 0x55, 0x92, 0x88, 0x5B, 0xB5, 0xA5, 0x30,
//                              0x8D, 0x08, 0x19, 0x63, 0x9D, 0xE0, 0x42, 0xDA, 0xEE, 0xCA, 0x3F, 0x6B, 0x5E, 0x7E, 0x71,
//                              0xCB, 0x5A, 0xF3, 0x06, 0x0D, 0x66, 0x41, 0xEA, 0x8B, 0xEC, 0xB0, 0x10, 0x28, 0x93, 0x8A,
//                              0x05, 0x1C, 0xC1, 0xF2, 0xF5, 0x7B, 0x4E, 0xB3, 0x18, 0x70, 0xB8, 0x65, 0xAA, 0x74, 0xA3,
//                              0xBA, 0xA0, 0x82, 0x6F, 0xDD, 0x53, 0xDB, 0xBF, 0x02, 0x36, 0x32, 0xF6, 0x94, 0x16, 0x8F,
//                              0x6E, 0x86, 0xFE, 0xD4, 0xC3, 0x27, 0x2C, 0x50, 0xC4, 0x1D, 0xC8, 0xFF, 0xD8, 0x3A, 0x04,
//                              0x3D, 0x0B, 0x80, 0x5C, 0x73, 0xAF, 0xA6, 0xBD, 0x2B, 0x8E, 0x23, 0x77, 0x4C, 0x7C, 0x79,
//                              0xD6, 0x13, 0x3C, 0xAC, 0x20, 0x60, 0xF1, 0x14, 0xE3, 0xAD, 0x95, 0xFB, 0x0A, 0x26, 0x7F,
//                              0xCE, 0xBB, 0x72, 0xE7, 0xD3, 0x3B, 0x09, 0xB7, 0x17, 0xE5, 0x99, 0xE1, 0x24, 0xE6, 0x9A,
//                              0x48, 0x2A, 0xF4, 0x6A, 0xF0, 0xD1, 0xD7, 0x6D, 0xDE, 0x69, 0xB1, 0xFA, 0x59, 0x2E, 0x2D,
//                              0x45, 0xC2, 0x89, 0x4A, 0xF7, 0x40, 0x91, 0x6C, 0xB4, 0xC9, 0xA9, 0xFC, 0x90, 0xD2, 0x44,
//                              0x84, 0x11, 0xA7, 0xFD, 0xA4, 0x01, 0x12, 0xA8, 0x98, 0xF8, 0x76, 0xEB, 0xCC, 0x1A, 0x54,
//                              0x0F, 0xAE, 0xC6, 0x9F, 0x58, 0x35, 0xE8, 0x87, 0xE2, 0x5D, 0xD9, 0x97, 0x75, 0xD5, 0x67,
//                              0x51, 0x21, 0xCD, 0x64, 0xD0, 0xC5, 0x1E, 0x25, 0x15, 0x57, 0xBC, 0x33, 0xE4, 0x34, 0x61,
//                              0x37, 0xE9, 0x39, 0xB2, 0xBE, 0x07, 0x03, 0x1B, 0xED, 0x52, 0x22, 0x83, 0x38, 0x9B, 0xB6,
//                              0xC7, 0xDC, 0xCF, 0xA2, 0xC0, 0xF9, 0x9C, 0xDF, 0xAB, 0x78, 0x1F, 0x3E, 0x85, 0x4F, 0x9E,
//                              0x49
//                          };
//            Assert.AreEqual(sbox, GenerateSBox(key));
//        }
//#endif

    public byte[] DecryptPacket(byte[] content, bool udpPacket) {
      switch (CryptMode) {
        default:
          throw new NotImplementedException("Unimplemented CryptMode: " + CryptMode);
        case eCryptMode.None:
          return content;
        case eCryptMode.RC4:
          // decrypt the packet content (everything)
          _sbox.ThrowIfNull();
          SymdecryptRC4Lib.Singleton.DecodeMythicRC4Packet(content, 2, content.Length - 2, _sbox, udpPacket);
          return content;
      }
    }

    public byte[] EncryptPacket(byte[] content, bool udpPacket) {
      switch (CryptMode) {
        default:
          throw new NotImplementedException("Unimplemented CryptMode: " + CryptMode);
        case eCryptMode.None:
          return content;
        case eCryptMode.RC4:
          _sbox.ThrowIfNull();
          // We can't work in place here since this buffer might be reused
          var result = new byte[content.Length];
          Buffer.BlockCopy(content, 0, result, 0, result.Length);
          SymdecryptRC4Lib.Singleton.EncodeMythicRC4Packet(result, 2, result.Length - 2, _sbox, udpPacket);
          return result;
      }
    }
  }
}
